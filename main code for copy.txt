def get_pdf_text(pdf_docs):
        text = ""
        for pdf in pdf_docs:
            pdf_reader = PdfReader(pdf)
            for page in pdf_reader.pages:
                text += page.extract_text()
        return text

    def get_text_chunks(text):
        text_splitter = CharacterTextSplitter(
            separator="\n", chunk_size=1000, chunk_overlap=200, length_function=len
        )
        chunks = text_splitter.split_text(text)
        return chunks

    def get_vectorstore(text_chunks):
        embeddings = OpenAIEmbeddings()
        vectorstore = FAISS.from_texts(texts=text_chunks, embedding=embeddings)
        return vectorstore

    def get_conversation_chain(vectorstore):
        llm = ChatOpenAI()

        memory = ConversationBufferMemory(
            memory_key="chat_history", return_messages=True
        )
        conversation_chain = ConversationalRetrievalChain.from_llm(
            llm=llm, retriever=vectorstore.as_retriever(), memory=memory
        )
        return conversation_chain

    def handle_userinput(user_question):
        response = st.session_state.conversation({"question": user_question})

        st.session_state.chat_history = response["chat_history"]
        for i, message in enumerate(st.session_state.chat_history):
            if i % 2 == 0:
                st.write(
                    user_template.replace("{{MSG}}", message.content),
                    unsafe_allow_html=True,
                )
            else:
                st.write(
                    bot_template.replace("{{MSG}}", message.content),
                    unsafe_allow_html=True,
                )

    USER_CREDENTIALS = {"aman": "aman"}

    def authenticate(username, password):
        stored_password = USER_CREDENTIALS.get(username)
        if stored_password and stored_password == password:
            return True
        return False

    def main():
        load_dotenv()

        if "conversation" not in st.session_state:
            st.session_state.conversation = None
        if "chat_history" not in st.session_state:
            st.session_state.chat_history = None
        st.set_page_config(
            page_title="Chat-Bot for Hydroponics", page_icon=":seedling:"
        )
        st.write(css, unsafe_allow_html=True)
        st.sidebar.title("Login")
        username = st.sidebar.text_input("Username")
        password = st.sidebar.text_input("Password", type="password")
        login_button = st.sidebar.button("Login")
        if login_button:
            if authenticate(username, password):
                st.success(f"Welcome, {username}!")
                st.experimental_set_query_params(authenticated=True)
                # Proceed to main application logic
            else:
                st.error("Invalid username or password")
        if st.session_state.get("authenticated"):
            st.experimental_rerun()

        st.header("Chat-Bot for Hydroponics :seedling:")
        user_question = st.text_input("Ask me anything about hydrophonics:")
        if user_question:
            handle_userinput(user_question)

        file_path = "C:\\Users\\amand\\Desktop\\clone2\\ask-multiple-pdfs\\Hydroponic_vegetable_cultivation.pdf"

        pdf_docs = open(file_path, "rb")
        raw_text = get_pdf_text([pdf_docs])
        text_chunks = get_text_chunks(raw_text)
        vectorstore = get_vectorstore(text_chunks)
        st.session_state.conversation = get_conversation_chain(vectorstore)

    if __name__ == "__main__":
        main()